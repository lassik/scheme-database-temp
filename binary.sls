;; Automatically generated
(library (binary)
         (export read-binary-sexp write-binary-sexp)
         (import (rnrs))
         (define (read-varint-or-false in)
           (let loop ((value #f) (shift 0))
             (let ((byte (get-u8 in)))
               (if (eof-object? byte)
                   value
                   (let ((value
                          (bitwise-ior (or value 0)
                                       (bitwise-arithmetic-shift
                                        (bitwise-and 127 byte)
                                        shift))))
                     (if (= 0 (bitwise-and 128 byte))
                         value
                         (loop value (+ shift 7))))))))
         (define (read-varint in)
           (or (read-varint-or-false in)
               (error #f "eof when trying to read varint")))
         (define (write-varint out value)
           (cond ((< value 128) (put-u8 out value))
                 (else (put-u8 out (bitwise-ior 128 (bitwise-and value 127)))
                       (write-varint out (bitwise-arithmetic-shift value -7)))))
         (define (read-varbytes in)
           (let ((n (read-varint in)))
             (let ((b (get-bytevector-n in n)))
               (unless (= n (bytevector-length b)) (error #f "Short read"))
               b)))
         (define (write-varbytes out b)
           (write-varint out (bytevector-length b))
           (put-bytevector out b))
         (define (read-binary-sexp in)
           (let ((tag (read-varint-or-false in)))
             (case tag
               ((#f) (eof-object))
               ((0) '())
               ((1) #f)
               ((2) #t)
               ((3) (read-varbytes in))
               ((4) (read-varint in))
               ((5) (- (read-varint in)))
               ((12)
                (let* ((a (read-binary-sexp in)) (d (read-binary-sexp in)))
                  (cons a d)))
               ((13)
                (let* ((n (read-varint in)) (v (make-vector n)))
                  (let loop ((i 0))
                    (cond ((= i n) v)
                          (else (vector-set! v i (read-binary-sexp in))
                                (loop (+ i 1)))))))
               ((14) (utf8->string (read-varbytes in)))
               ((15) (string->symbol (utf8->string (read-varbytes in))))
               (else
                (error #f
                       (string-append "Read unknown type tag: #x"
                                      (number->string tag)))))))
         (define (write-binary-sexp out x)
           (cond ((null? x) (write-varint out 0))
                 ((eqv? #f x) (write-varint out 1))
                 ((eqv? #t x) (write-varint out 2))
                 ((bytevector? x) (write-varint out 3) (write-varbytes out x))
                 ((integer? x) (write-varint out (if (>= x 0) 4 5))
                               (write-varint out (abs x)))
                 ((pair? x) (write-varint out 12)
                            (write-binary-sexp out (car x))
                            (write-binary-sexp out (cdr x)))
                 ((vector? x) (write-varint out 13)
                              (vector-for-each
                               (lambda (elt) (write-binary-sexp out elt))
                               x))
                 ((string? x) (write-varint out 14)
                              (write-varbytes out (string->utf8 x)))
                 ((symbol? x) (write-varint out 15)
                              (write-varbytes out
                                              (string->utf8
                                               (symbol->string x))))
                 (else
                  (error #f "Don't know how to write that kind of object")))))
